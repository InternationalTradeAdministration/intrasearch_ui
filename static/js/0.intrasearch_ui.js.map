{"version":3,"sources":["API/config.js","store/actions/paramHandlers.js","store/actions/actions.js","store/actions/actionTypes.js","Components/ResultsList.jsx","Components/Checkbox.jsx","Components/CheckboxCategory.jsx","Components/FiltersContainer.jsx","Components/ResultsContainer.jsx","Components/FormContainer.jsx","Components/App.js","store/reducers/resultReducer.js","store/reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["module","exports","url","apiKey","getAppliedFilters","query_string","queryString","categories","q","appliedFilters","Object","keys","toString","entries","forEach","key","value","split","toggleFilter","category","newFilters","includes","filter","el","push","length","updateFilters","dispatch","type","params","arrayFormat","searchQuery","history","search","fetch","config","then","response","json","updateAggregations","aggsToUpdate","cat","agg","existingFilters","map","item","aggregations","aggregation","fetchNewQuery","activePage","document","querySelectorAll","checked","withRouter","props","className","total","results","id","href","link","title","summary","Checkbox","state","isChecked","handleToggleFilter","bind","event","target","name","this","setState","location","prevProps","prevState","uniqStr","snake","replace","$1","toUpperCase","onChange","snakeToTitleCase","Component","connect","actionCreators","require","CheckboxCategory","showAll","resetToggle","e","preventDefault","showAllText","limit","onClick","toggleShowAll","itemArray","items","sort","a","b","i","uniqItemArray","Set","open","filterTitles","slice","toggleShowButton","trade_topics","industries","countries","types","clearFilters","useState","setStr","Date","now","listCategories","obj","filterItemsForMarketIntel","ResultsContainer","getQueryTerm","pageNumber","fetchNewPage","resultState","showLoadingAnimation","ready","loading","rows","style","width","margin","color","totalItemsCount","itemsCountPerPage","firstPageText","prevPageText","nextPageText","lastPageText","handlePageChange","FormContainer","handleSubmit","handleChangeInput","parsed","queryTerm","onSubmit","aria-label","placeholder","size","path","render","initialState","offset","resultReducer","action","rootReducer","combineReducers","Boolean","window","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createBrowserHistory","renderIntrasearchUI","divID","ReactDOM","getElementById","Explorer","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/0.intrasearch_ui.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = {\n    url: \"https://api.trade.gov/v1/web_documents/search.json\",\n    apiKey: \"d0lmowK8tvxPixAfm9sKOd_f\",\n  }\n} else if (process.env.NODE_ENV === 'staging') {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n  }\n} else if (process.env.NODE_ENV === 'test'){\n  module.exports = {\n    /* move the json file to /public first */\n    url: \"./Drupal_Intrasearch-export.json\",\n    apiKey: \"test\",  \n  }\n} else {\n  module.exports = {\n    url: \"https://api.trade.gov/v1/web_documents/search.json\",\n    apiKey: \"d0lmowK8tvxPixAfm9sKOd_f\",\n    // url: \"./Drupal_Intrasearch-export.json\",\n    // apiKey: \"test\",  \n  }\n}\n","import * as queryString from 'query-string';\n\nexport function getAppliedFilters(query_string) {\n  let {q, ...categories} = queryString.parse(query_string);\n  let appliedFilters = {};\n\n  if (Object.keys(categories).toString() !== \"\") {\n    Object.entries(categories).forEach(\n      ([key, value]) => (\n        appliedFilters[key] = value.split(',')\n      )\n    )  \n  }\n  return appliedFilters; /* Returns an object containing key/array pairs */\n}\n\nexport function updateFilters(category, value, query_string) {\n  let appliedFilters = getAppliedFilters(query_string);\n\n  if ((appliedFilters[category]) && (appliedFilters[category].includes(value))) {\n    /* The category of the checked box already includes this value, want to remove it */\n    appliedFilters[category] = appliedFilters[category].filter(el => el !== value)\n  } else if (appliedFilters[category]) {\n    /* The category exists in the object, want to add the value to its array */\n    appliedFilters[category].push(value)\n  } else {\n    /* Initialize the category's array in the object using the checked box's value */\n    appliedFilters[category] = [value]\n  }\n\n  /* Remove categories that are now empty */\n  if (appliedFilters[category].length === 0) {\n    delete appliedFilters[category]\n  }\n  return appliedFilters\n} /* Returns new appliedFilters */\n","import * as actionTypes from './actionTypes'\nimport config from '../../API/config.js'\nimport * as queryString from 'query-string';\nimport { getAppliedFilters, updateFilters } from './paramHandlers';\nimport { history } from '../../index';\n\nexport const clearFilters = (searchQuery) => {\n  history.push({ search: `q=${searchQuery}`}); /* clear applied filters from the URL */\n  return (dispatch) => {\n    return fetch(`${config.url}?q=${searchQuery}&api_key=${config.apiKey}&size=10&offset=0`)\n    .then(response => response.json())\n    .then(response => dispatch({ \n      type: actionTypes.FETCH_NEW_QUERY, \n      response: response,\n    }));\n  }\n}\n\nexport const toggleFilter = (category, value, query_string) => {\n\n  let newFilters = updateFilters(category, value, query_string);\n\n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS })\n\n    let params = queryString.stringify(newFilters, {arrayFormat: 'comma'});\n    let searchQuery = queryString.parse(query_string).q; //want query term from the original string\n\n    history.push({ search: `q=${searchQuery}&${params}` });\n\n    return fetch(`${config.url}?q=${searchQuery}&${params}&api_key=${config.apiKey}&size=10&offset=0`)\n      .then(response => response.json())\n      .then(response => dispatch(updateAggregations(`q=${searchQuery}&${params}`, response, category)));\n  }\n}\n\nexport const updateAggregations = (query_string, response, category) => {\n  return (dispatch) => {\n    let aggsToUpdate = [];\n    const categories_array = ['trade_topics', 'industries', 'countries', 'types'];\n\n    categories_array.forEach(\n      (cat) => {\n        /* add categories to the list if they were not the subject of the toggle, or if the category is/becomes empty */\n        if ( (cat !== category) || ((Object.keys(getAppliedFilters(query_string)))===[]) || (!(getAppliedFilters(query_string)[cat])) ) {\n          aggsToUpdate.push(cat)\n        }\n      }\n    )\n    dispatch({ type: actionTypes.FETCH_WITH_FILTERS, response: response });\n    \n    aggsToUpdate.forEach(agg => {\n      let existingFilters = []\n      if (getAppliedFilters(query_string)[agg]) {\n        existingFilters = getAppliedFilters(query_string)[agg].map((item) => {\n          return {key: item}\n        })\n        // console.log('🧬existingFilters: ', existingFilters)\n      }\n      dispatch({ type: actionTypes.UPDATE_SOME_AGGREGATIONS, aggregations: response.aggregations, aggregation: agg, existingFilters: existingFilters });\n    })\n  }\n}\n\nexport const fetchNewQuery = (query_string, activePage=1) => {\n  document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n  \n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(activePage-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_QUERY, \n        response: response,\n      }));\n  }\n}\n\nexport const fetchNewPage = (query_string, pageNumber) => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.UPDATE_PAGE_NUMBER, pageNumber: pageNumber });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(pageNumber-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_PAGE, \n        response: response,\n      }));\n  }\n}\n","/* Filter Actions */\n// export const TOGGLE_FILTER = 'TOGGLE_FILTER';\n// export const CLEAR_FILTERS = 'CLEAR_FILTERS';\n\n/* Result Actions */\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\nexport const LOADING_RESULTS = 'LOADING_RESULTS';\nexport const FETCH_NEW_QUERY = 'FETCH_NEW_QUERY';\nexport const FETCH_WITH_FILTERS = 'FETCH_WITH_FILTERS';\nexport const UPDATE_PAGE_NUMBER = 'UPDATE_PAGE_NUMBER';\nexport const FETCH_NEW_PAGE = 'FETCH_NEW_PAGE';\nexport const UPDATE_SOME_AGGREGATIONS = 'UPDATE_SOME_AGGREGATIONS';\nexport const UPDATE_ALL_AGGREGATIONS = \"UPDATE_ALL_AGGREGATIONS\";","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './styles/ResultsList.scss';\n\nconst ResultsList = (props) => {\n\n  return(\n    <div className=\"ResultsList\">\n      <p className=\"totalMessage\"><strong>{props.total}</strong> results</p>\n      \n      { props.results.map(item => {\n        return (\n          <div className=\"anItem\" key={item.id}>\n            <a href={item.link}>{item.title}</a>\n            <p>{item.summary}</p>\n          </div>\n        )\n      }) }\n    </div>\n  )\n}\n\nexport default withRouter(ResultsList);","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getAppliedFilters } from '../store/actions/paramHandlers';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\n\nclass Checkbox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isChecked: false,\n    }\n    this.handleToggleFilter = this.handleToggleFilter.bind(this);\n  }\n\n\n  handleToggleFilter(event) {\n    const { name, value } = event.target\n    this.setState({isChecked: !this.state.isChecked}, () => { \n      this.props.toggleFilter(name, value, this.props.location.search)\n    })\n  }\n\n  componentDidMount() {\n    if (getAppliedFilters(this.props.location.search)[this.props.category]) {\n      if (getAppliedFilters(this.props.location.search)[this.props.category].includes(this.props.item)) {\n        this.setState({ isChecked: true })\n      } else { \n        this.setState({ isChecked: false })\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if ( queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q ) {\n      /* If we change the query term, reset the checkboxes status */\n      this.setState({ isChecked: false })\n    } else if ((this.props.uniqStr) !== (prevProps.uniqStr)) {\n      /* uniqStr changes when the 'Clear All' button is clicked */\n      this.setState({ isChecked: false })\n    }\n  }\n\n  snakeToTitleCase (snake) {\n    return snake.replace(/([_][a-z])/ig, ($1) => {\n      return $1.toUpperCase()\n        .replace('_', ' ');\n    }).replace(/(^[a-z]{1})/ig, ($1) => {\n      return $1.toUpperCase()\n    })\n  }\n\n  render() {\n    const { key, category, item } = this.props;\n    return (\n      <label key={key}>\n        <input type=\"checkbox\" name={category} value={item} key={key} onChange={(event) => this.handleToggleFilter(event)} checked={this.state.isChecked} /> {(category === \"types\") ? (this.snakeToTitleCase(item)) : (item)}\n      </label>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleFilter: (category, value, query_string) => dispatch(actionCreators.toggleFilter(category, value, query_string)),\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(Checkbox));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as queryString from 'query-string';\nimport Checkbox from './Checkbox';\nrequire('details-polyfill')\n\nclass CheckboxCategory extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showAll: false,\n    }\n  }\n\n  resetToggle() {\n    this.setState({ showAll: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      /* If we start with a new query term, reset the showAll toggles, otherwise leave them to the user */\n      this.resetToggle();\n    }\n  }\n\n  toggleShowAll(e) {\n    e.preventDefault();\n    this.setState({ showAll: !this.state.showAll });\n  }\n\n  toggleShowButton(length) {\n    const { showAll } = this.state;\n    const showAllText = showAll ? '- Show Less' : '+ Show More';\n\n    if (length <= this.props.limit) return null;\n\n    return (\n      <button onClick={(e)=>this.toggleShowAll(e)} className=\"toggleShow\">{ showAllText }</button>\n    );\n  }\n\n  render() {\n    const itemArray = this.props.items.sort((a, b) => a[\"key\"] > b[\"key\"] ? 1 : -1).map(i => i[\"key\"]);\n    const uniqItemArray = [...new Set(itemArray)]\n    return (\n\n      (uniqItemArray.length === 0) ? ( null ) : (\n\n        <details className=\"FilterCategory\" open>\n        <summary id={filterTitles[this.props.category]}>{filterTitles[this.props.category]}</summary>\n\n        { ((uniqItemArray.length > this.props.limit) && (!this.state.showAll)) ? (\n          uniqItemArray.slice(0, this.props.limit).map((item, i) => {\n            return <Checkbox key={i} category={this.props.category} item={item} uniqStr={this.props.uniqStr}/>\n          })\n        ) : (\n          uniqItemArray.map((item, i) => {\n            return <Checkbox key={i} category={this.props.category} item={item} uniqStr={this.props.uniqStr}/>\n          })\n        )}\n        {this.toggleShowButton(uniqItemArray.length)}\n        </details>\n      )\n\n    )\n  }\n}\n\nexport default withRouter(CheckboxCategory);\n\nconst filterTitles = {\n  trade_topics: \"Trade Topics\",\n  industries: \"Industries\",\n  countries: \"Countries\",\n  types: \"Type\",\n}\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport CheckboxCategory from './CheckboxCategory';\nimport './styles/FiltersContainer.scss';\nimport * as actionCreators from '../store/actions/index';\nrequire('details-polyfill')\n\nfunction FiltersContainer(props) {\n\n  function listCategories() {\n    let categories = []\n      Object.entries(props.aggregations).forEach(\n        ([key, value]) => categories.push(key)\n      )\n    return categories\n  }\n\n  const [uniqStr, setStr] = useState(0);\n\n  function handleClearFilters() {\n    props.clearFilters(queryString.parse(props.location.search).q);\n    setStr(Date.now())\n    /* When click 'Clear All', update uniqStr with the current datetime, and pass it down to the checkbox.  When that changes, the box unchecks. */\n    /* It's wierd, I know.  But \"document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false )\" doesn't work because they're controlled components and are not connected to the redux store */\n  }\n\n  function filterItemsForMarketIntel(category, items) {\n    if (category === 'types') {\n      return items.filter(obj => obj['key'] === 'market_intelligence')\n    } else { return items }\n  }\n\n  function filterCategories() {\n    return (\n      // eslint-disable-next-line array-callback-return\n      listCategories().map((cat, i) => {\n        if (props.aggregations[cat].length) {\n          const items = filterItemsForMarketIntel(cat, props.aggregations[cat])\n          return (<CheckboxCategory category={cat} key={i} items={items} limit={5} uniqStr={uniqStr} />)\n        }\n      })\n    )\n  }\n\n  return(\n    <div className='FiltersContainer'>\n      { (props.aggregations !== {}) ? (\n        <>\n          <div><h2>Filter Results</h2><button onClick={() => handleClearFilters()}>[Clear All]</button></div>\n          {filterCategories()}\n        </>\n      ) : null }\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearFilters: (searchQuery) => dispatch(actionCreators.clearFilters(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(FiltersContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport Pagination from 'react-js-pagination';\nimport ReactPlaceholder from 'react-placeholder';\nimport \"react-placeholder/lib/reactPlaceholder.css\";\nimport ResultsList from './ResultsList';\nimport FiltersContainer from './FiltersContainer';\nimport './styles/ResultsContainer.scss';\n\nclass ResultsContainer extends Component {\n\n  getQueryTerm = () => queryString.parse(this.props.location.search).q;\n\n  handlePageChange(pageNumber) {\n    this.props.fetchNewPage(this.props.location.search, pageNumber)\n  };\n\n  componentDidMount() {\n    this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n    }\n  }\n\n  render() {\n    // console.log('🍎', this.props.location.search) // `?q=banks&industries=Agribusiness,Automotive`\n    // console.log('🍏', queryString.parse(this.props.location.search)) // { industries: \"Agribusiness,Automotive\", q: \"banks\" }\n    return (\n      <div className=\"ResultsContainer\">\n\n        <FiltersContainer aggregations={this.props.resultState.aggregations}/>\n\n        <ReactPlaceholder \n          type='text' \n          showLoadingAnimation={true} \n          ready={!this.props.resultState.loading} \n          rows={6} style={{ width: '60vw', margin: '2em 0 0.5em 1em' }} color='#E0E0E0'\n        >\n\n          <ResultsList searchQuery={this.getQueryTerm()} total={this.props.resultState.total} results={this.props.resultState.results}/>\n\n        </ReactPlaceholder>\n\n        { (this.props.resultState.total > 0) ? (\n          <Pagination \n            activePage={this.props.resultState.activePage}\n            totalItemsCount={this.props.resultState.total}\n            itemsCountPerPage={10}\n            firstPageText=\"<<\"\n            prevPageText=\"<\"\n            nextPageText=\">\"\n            lastPageText=\">>\"\n            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\n          />\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string, activePage) => dispatch(actionCreators.fetchNewQuery(query_string, activePage)),\n    fetchNewPage: (query_string, pageNumber) => dispatch(actionCreators.fetchNewPage(query_string, pageNumber))\n  }\n}\n\nexport default ResultsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResultsContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IoMdSearch } from 'react-icons/io'\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport ResultsContainer from './ResultsContainer';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchQuery: '',\n    }\n    this.handleChangeInput = this.handleChangeInput.bind(this);\n  }\n\n  handleChangeInput(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (queryString.parse(this.props.location.search).q === this.state.searchQuery) {\n      /* if we're trying to search again with the same query, trigger the search */\n      this.props.fetchNewQuery(`?q=${this.state.searchQuery}`)\n    } else {\n      this.props.history.push({ search: `q=${this.state.searchQuery}`});\n    }\n  }\n\n  render() {\n    const parsed = queryString.parse(this.props.location.search);\n    // console.log('parsed', parsed)\n    const queryTerm = parsed.q;\n\n    return (\n      <div>\n        <form onSubmit={(event) => this.handleSubmit(event)}>\n          { queryTerm ? (\n            <p className=\"searchMessage\">Search Results for <strong className=\"searchMessageKeyword\">{queryTerm}</strong></p>\n          ) : null }\n\n          <input\n            type=\"text\" \n            name=\"searchQuery\"\n            aria-label=\"Enter search query\"\n            placeholder=\"Enter search query\"\n            value={this.state.searchQuery}\n            onChange={(event) => this.handleChangeInput(event)}\n          />\n          <button type=\"submit\" aria-label=\"submit\"><IoMdSearch size=\"2em\"/></button>\n        </form>\n        { queryTerm ? (\n          <ResultsContainer searchQuery={parsed}/>\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string) => dispatch(actionCreators.fetchNewQuery(query_string)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FormContainer));","import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport FormContainer from './FormContainer';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path={`/:query?`} render={(props) =>\n        <FormContainer {...props} location={props.location} />} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  total: 0,\n  offset: 0,\n  activePage: 1,\n  results: [],\n  aggregations: {},\n  loading: false,\n}\n\nconst resultReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actionTypes.LOADING_RESULTS:\n      return { \n        ...state, \n        loading: true, \n      }\n    case actionTypes.FETCH_NEW_QUERY:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n        aggregations: action.response.aggregations\n      }\n    case actionTypes.FETCH_WITH_FILTERS:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    case actionTypes.UPDATE_SOME_AGGREGATIONS:\n      // console.log([action.aggregation], [...action.aggregations[action.aggregation], ...action.existingFilters])\n      return {\n        ...state,\n        aggregations: {\n          ...state.aggregations,\n          // need to spread in here the currently selected ones\n          [action.aggregation]: [...action.aggregations[action.aggregation], ...action.existingFilters]\n          // [action.aggregation]: action.aggregations[action.aggregation]\n        }\n      }\n    case actionTypes.UPDATE_ALL_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: action.aggregations,\n      }\n    case actionTypes.UPDATE_PAGE_NUMBER:\n      return {\n        ...state,\n        loading: true,\n        activePage: action.pageNumber,\n      }\n    case actionTypes.FETCH_NEW_PAGE:\n      return {\n        ...state,\n        loading: false,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    default:\n      return state;\n  }\n};\n\nexport default resultReducer;","import { combineReducers } from 'redux';\nimport resultReducer from './resultReducer';\n\nconst rootReducer = combineReducers({\n  resultState: resultReducer,\n})\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'; // this polyfill needs to be first for IE11 support\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'; // necessary for IE11 support for Router\nimport 'regenerator-runtime/runtime'; // necessary for IE11 support for Router\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createBrowserHistory } from 'history';\nimport App from './Components/App';\nimport rootReducer from './store/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport const history = createBrowserHistory();\n\nfunction renderIntrasearchUI(divID) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById(divID)\n  );\n}\n\nexport default renderIntrasearchUI;\nwindow.Explorer = {\n  renderIntrasearchUI: renderIntrasearchUI,\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}