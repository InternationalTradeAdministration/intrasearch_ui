{"version":3,"sources":["API/config.js","store/actions/paramHandlers.js","store/actions/actions.js","store/actions/actionTypes.js","Components/ResultsList.jsx","Components/Checkbox.jsx","Components/CheckboxCategory.jsx","Components/FiltersContainer.jsx","Components/ResultsContainer.jsx","Components/FormContainer.jsx","Components/App.js","store/reducers/resultReducer.js","store/reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["module","exports","url","apiKey","getAppliedFilters","query_string","queryString","categories","q","appliedFilters","Object","keys","toString","entries","forEach","key","value","split","toggleFilter","category","newFilters","includes","filter","el","push","length","updateFilters","dispatch","type","params","arrayFormat","searchQuery","history","search","fetch","config","then","response","json","updateAggregations","aggsToUpdate","cat","console","log","agg","aggregations","aggregation","fetchNewQuery","activePage","document","querySelectorAll","checked","withRouter","props","className","total","results","map","item","updatedDate","Date","parseInt","changed","toDateString","id","href","link","title","summary","Checkbox","state","isChecked","handleToggleFilter","bind","event","preventDefault","target","name","this","setState","location","onChange","Component","connect","actionCreators","require","CheckboxCategory","showAll","prevProps","prevState","resetToggle","e","showAllText","limit","onClick","toggleShowAll","open","filterTitles","items","sort","a","b","slice","i","toggleShowButton","trade_topics","industries","countries","resultState","clearFilters","listCategories","ResultsContainer","getQueryTerm","pageNumber","fetchNewPage","showLoadingAnimation","ready","loading","rows","style","width","margin","color","totalItemsCount","itemsCountPerPage","firstPageText","prevPageText","nextPageText","lastPageText","handlePageChange","FormContainer","handleSubmit","handleChangeInput","parsed","queryTerm","onSubmit","aria-label","placeholder","size","path","render","initialState","offset","resultReducer","action","rootReducer","combineReducers","Boolean","window","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createHashHistory","renderIntrasearchUI","divID","ReactDOM","hashType","getElementById","Explorer","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/0.intrasearch_ui.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n  }\n} else if (process.env.NODE_ENV === 'staging') {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n  }\n} else if (process.env.NODE_ENV === 'test'){\n  module.exports = {\n    /* move the json file to /public first */\n    url: \"./Drupal_Intrasearch-export.json\",\n    apiKey: \"test\",  \n  }\n} else {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n    // url: \"./Drupal_Intrasearch-export.json\",\n    // apiKey: \"test\",  \n  }\n}\n","import * as queryString from 'query-string';\n\nexport function getAppliedFilters(query_string) {\n  let {q, ...categories} = queryString.parse(query_string);\n  let appliedFilters = {};\n\n  if (Object.keys(categories).toString() !== \"\") {\n    Object.entries(categories).forEach(\n      ([key, value]) => (\n        appliedFilters[key] = value.split(',')\n      )\n    )  \n  }\n  return appliedFilters; /* Returns an object containing key/array pairs */\n}\n\nexport function updateFilters(category, value, query_string) {\n  let appliedFilters = getAppliedFilters(query_string);\n\n  if ((appliedFilters[category]) && (appliedFilters[category].includes(value))) {\n    /* The category of the checked box already includes this value, want to remove it */\n    appliedFilters[category] = appliedFilters[category].filter(el => el !== value)\n  } else if (appliedFilters[category]) {\n    /* The category exists in the object, want to add the value to its array */\n    appliedFilters[category].push(value)\n  } else {\n    /* Initialize the category's array in the object using the checked box's value */\n    appliedFilters[category] = [value]\n  }\n\n  /* Remove categories that are now empty */\n  if (appliedFilters[category].length === 0) {\n    delete appliedFilters[category]\n  }\n  return appliedFilters\n} /* Returns new appliedFilters */\n","import * as actionTypes from './actionTypes'\nimport config from '../../API/config.js'\nimport * as queryString from 'query-string';\nimport { getAppliedFilters, updateFilters } from './paramHandlers';\nimport { history } from '../../index';\n\nexport const clearFilters = (searchQuery) => {\n  document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n  history.push({ search: `q=${searchQuery}`}); /* effectively clears the filters */\n  return (dispatch) => {\n    return fetch(`${config.url}?q=${searchQuery}&api_key=${config.apiKey}&size=10&offset=0`)\n    .then(response => response.json())\n    .then(response => dispatch({ \n      type: actionTypes.FETCH_NEW_QUERY, \n      response: response,\n    }));\n  }\n}\n\nexport const toggleFilter = (category, value, query_string) => {\n\n  let newFilters = updateFilters(category, value, query_string);\n  \n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS })\n\n    let params = queryString.stringify(newFilters, {arrayFormat: 'comma'});\n    let searchQuery = queryString.parse(query_string).q; //want query term from the original string\n\n    history.push({ search: `q=${searchQuery}&${params}` });\n\n    return fetch(`${config.url}?q=${searchQuery}&${params}&api_key=${config.apiKey}&size=10&offset=0`)\n      .then(response => response.json())\n      .then(response => dispatch(updateAggregations(`q=${searchQuery}&${params}`, response, category)));  \n  }\n}\n\nexport const updateAggregations = (query_string, response, category) => {\n  return (dispatch) => {\n    let aggsToUpdate = [];\n    const categories_array = ['trade_topics', 'industries', 'countries'];\n\n    categories_array.forEach(\n      (cat) => {\n        /* add categories to the list if they were not the subject of the toggle, or if the category is/becomes empty */\n        if ( (cat !== category) || ((Object.keys(getAppliedFilters(query_string)))===[]) || (!(getAppliedFilters(query_string)[cat])) ) {\n          console.log(`Updating ${cat}!`)\n          aggsToUpdate.push(cat)\n        }\n      }\n    )\n    dispatch({ type: actionTypes.FETCH_WITH_FILTERS, response: response });\n    \n    aggsToUpdate.forEach(agg => {\n      dispatch({ type: actionTypes.UPDATE_SOME_AGGREGATIONS, aggregations: response.aggregations, aggregation: agg });\n    })\n  }\n}\n\nexport const fetchNewQuery = (query_string, activePage=1) => {\n  document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n  \n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(activePage-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_QUERY, \n        response: response,\n      }));\n  }\n}\n\nexport const fetchNewPage = (query_string, pageNumber) => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.UPDATE_PAGE_NUMBER, pageNumber: pageNumber });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(pageNumber-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_PAGE, \n        response: response,\n      }));\n  }\n}\n","/* Filter Actions */\n// export const TOGGLE_FILTER = 'TOGGLE_FILTER';\n// export const CLEAR_FILTERS = 'CLEAR_FILTERS';\n\n/* Result Actions */\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\nexport const LOADING_RESULTS = 'LOADING_RESULTS';\nexport const FETCH_NEW_QUERY = 'FETCH_NEW_QUERY';\nexport const FETCH_WITH_FILTERS = 'FETCH_WITH_FILTERS';\nexport const UPDATE_PAGE_NUMBER = 'UPDATE_PAGE_NUMBER';\nexport const FETCH_NEW_PAGE = 'FETCH_NEW_PAGE';\nexport const UPDATE_SOME_AGGREGATIONS = 'UPDATE_SOME_AGGREGATIONS';\nexport const UPDATE_ALL_AGGREGATIONS = \"UPDATE_ALL_AGGREGATIONS\";","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './styles/ResultsList.scss';\n\nconst ResultsList = (props) => {\n\n  return(\n    <div className=\"ResultsList\">\n      <p className=\"totalMessage\"><strong>{props.total}</strong> results</p>\n      \n      { props.results.map(item => {\n        let updatedDate = new Date(parseInt(item.changed)).toDateString()\n        return (\n          <div className=\"anItem\" key={item.id}>\n            <a href={item.link}>{item.title}</a>\n            <p>Updated {updatedDate}</p>\n            <p>{item.summary}</p>\n          </div>\n        )\n      }) }\n    </div>\n  )\n}\n\nexport default withRouter(ResultsList);","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getAppliedFilters } from '../store/actions/paramHandlers';\nimport * as actionCreators from '../store/actions/index';\n\nclass Checkbox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isChecked: false,\n    }\n    this.handleToggleFilter = this.handleToggleFilter.bind(this);\n  }\n\n\n  handleToggleFilter(event) {\n    event.preventDefault();\n    const { name, value } = event.target\n    // this.props.toggleFilter(name, value, this.props.location.search)\n    this.setState({isChecked: !this.state.isChecked},\n      () => { this.props.toggleFilter(name, value, this.props.location.search) }\n    )\n  }\n\n  componentDidMount() {\n    if (getAppliedFilters(this.props.location.search)[this.props.category]) {\n      if (getAppliedFilters(this.props.location.search)[this.props.category].includes(this.props.item[\"key\"])) {\n        this.setState({ isChecked: true })\n      } else { \n        this.setState({ isChecked: false })\n      }\n    }\n  }\n\n  render() {\n    const { key, category, item } = this.props;\n    const value = item[\"key\"];\n    return (\n      <label key={key}>\n        <input type=\"checkbox\" name={category} value={value} key={key} onChange={(event) => this.handleToggleFilter(event)} checked={this.state.isChecked} /> {value}: {item[\"doc_count\"]}\n      </label>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleFilter: (category, value, query_string) => dispatch(actionCreators.toggleFilter(category, value, query_string)),\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(Checkbox));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as queryString from 'query-string';\nimport Checkbox from './Checkbox';\nrequire('details-polyfill')\n\nclass CheckboxCategory extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showAll: false,\n    }\n  }\n\n  resetToggle() {\n    this.setState({ showAll: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      /* If we start with a new query term, reset the showAll toggles, otherwise leave them to the user */\n      this.resetToggle();\n    }\n  }\n\n  toggleShowAll(e) {\n    e.preventDefault();\n    this.setState({ showAll: !this.state.showAll });\n  }\n\n  toggleShowButton(length) {\n    const { showAll } = this.state;\n    const showAllText = showAll ? '- Show Less' : '+ Show More';\n\n    if (length <= this.props.limit) return null;\n\n    return (\n      <button onClick={(e)=>this.toggleShowAll(e)} className=\"toggleShow\">{ showAllText }</button>\n    );\n  }\n\n  render() {\n    return (\n      <details className=\"FilterCategory\" open>\n      <summary>{filterTitles[this.props.category]}</summary>\n\n      { ((this.props.items.length > this.props.limit) && (!this.state.showAll)) ? (\n        this.props.items.sort((a, b) => a[\"key\"] > b[\"key\"] ? 1 : -1).slice(0, this.props.limit).map((item, i) => {\n          return (\n            <Checkbox key={i} category={this.props.category} item={item}/>\n          )\n        })\n      ) : (\n        this.props.items.sort((a, b) => a[\"key\"] > b[\"key\"] ? 1 : -1).map((item, i) => {\n          return (\n            <Checkbox key={i} category={this.props.category} item={item}/>\n          )\n        })\n      )}\n      {this.toggleShowButton(this.props.items.length)}\n      </details>\n\n    )\n  }\n}\n\nexport default withRouter(CheckboxCategory);\n\nconst filterTitles = {\n  trade_topics: \"Trade Topics\",\n  industries: \"Industries\",\n  countries: \"Countries\",\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport CheckboxCategory from './CheckboxCategory';\nimport './styles/FiltersContainer.scss';\nimport * as actionCreators from '../store/actions/index';\nrequire('details-polyfill')\n\nfunction FiltersContainer(props) {\n\n  function listCategories() {\n    let categories = []\n      Object.entries(props.aggregations).forEach(\n        ([key, value]) => categories.push(key)\n      )\n    return categories\n  }\n\n  function handleClearFilters() {\n    props.clearFilters(queryString.parse(props.location.search).q);\n  }\n\n  function filterCategories() {\n    return (\n      // eslint-disable-next-line array-callback-return\n      listCategories().map((cat, i) => {\n        if (props.aggregations[cat].length) {\n          return (<CheckboxCategory category={cat} key={i} items={props.aggregations[cat]} limit={5}/>)\n        }\n      })\n    )\n  }\n  \n  return(\n    <div className=\"FiltersContainer\">\n      { (props.aggregations !== {}) ? (\n        <>\n          <div><h2>Filter Results</h2><button onClick={() => handleClearFilters()}>[Clear All]</button></div>\n          {filterCategories()}\n        </>\n      ) : null }\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearFilters: (searchQuery) => dispatch(actionCreators.clearFilters(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FiltersContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport Pagination from 'react-js-pagination';\nimport ReactPlaceholder from 'react-placeholder';\nimport \"react-placeholder/lib/reactPlaceholder.css\";\nimport ResultsList from './ResultsList';\nimport FiltersContainer from './FiltersContainer';\nimport './styles/ResultsContainer.scss';\n\nclass ResultsContainer extends Component {\n\n  getQueryTerm = () => queryString.parse(this.props.location.search).q;\n\n  handlePageChange(pageNumber) {\n    this.props.fetchNewPage(this.props.location.search, pageNumber)  // `?q=retail&countries=Andorra`\n  };\n\n  componentDidMount() {\n    this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n    }\n  }\n\n  render() {\n    // console.log(this.getQueryTerm());\n    // console.log(this.props.location.search)\n    // console.log(queryString.parse(this.props.location.search))\n    return (\n      <div className=\"ResultsContainer\">\n\n        <FiltersContainer aggregations={this.props.resultState.aggregations}/>\n\n        <ReactPlaceholder \n          type='text' \n          showLoadingAnimation={true} \n          ready={!this.props.resultState.loading} \n          rows={6} style={{ width: 250, margin: '2em 0 0.5em 1em' }} color='#E0E0E0'\n        >\n\n          <ResultsList searchQuery={this.getQueryTerm()} total={this.props.resultState.total} results={this.props.resultState.results}/>\n\n        </ReactPlaceholder>\n\n        { (this.props.resultState.total > 0) ? (\n          <Pagination \n            activePage={this.props.resultState.activePage}\n            totalItemsCount={this.props.resultState.total}\n            itemsCountPerPage={10}\n            firstPageText=\"<<\"\n            prevPageText=\"<\"\n            nextPageText=\">\"\n            lastPageText=\">>\"\n            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\n          />\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string, activePage) => dispatch(actionCreators.fetchNewQuery(query_string, activePage)),\n    fetchNewPage: (query_string, pageNumber) => dispatch(actionCreators.fetchNewPage(query_string, pageNumber))\n  }\n}\n\nexport default ResultsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResultsContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IoMdSearch } from 'react-icons/io'\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport ResultsContainer from './ResultsContainer';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchQuery: '',\n    }\n    this.handleChangeInput = this.handleChangeInput.bind(this);\n  }\n\n  handleChangeInput(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.history.push({ search: `q=${this.state.searchQuery}`});\n    // this.props.fetchNewQuery(this.state.searchQuery); /* this would make it fetch twice */\n  }\n\n  render() {\n    const parsed = queryString.parse(this.props.location.search);\n    // console.log(parsed)\n    const queryTerm = parsed.q;\n\n    return (\n      <div>\n        <form onSubmit={(event) => this.handleSubmit(event)}>\n          { queryTerm ? (\n            <p className=\"searchMessage\">Search Results for <strong className=\"searchMessageKeyword\">{queryTerm}</strong></p>\n          ) : null }\n\n          <input\n            type=\"text\" \n            name=\"searchQuery\"\n            aria-label=\"Enter search query\"\n            placeholder=\"Enter search query\"\n            value={this.state.searchQuery}\n            onChange={(event) => this.handleChangeInput(event)}\n          />\n          <button type=\"submit\" aria-label=\"submit\"><IoMdSearch size=\"2em\"/></button>\n        </form>\n        { queryTerm ? (\n          <ResultsContainer searchQuery={parsed}/>\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (searchQuery) => dispatch(actionCreators.fetchNewQuery(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FormContainer));","import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport FormContainer from './FormContainer';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path={`/:query?`} render={(props) =>\n        <FormContainer {...props} location={props.location} />} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  total: 0,\n  offset: 0,\n  activePage: 1,\n  results: [],\n  aggregations: {},\n  loading: false,\n}\n\nconst resultReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actionTypes.LOADING_RESULTS:\n      return { \n        ...state, \n        loading: true, \n      }\n    case actionTypes.FETCH_NEW_QUERY:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n        aggregations: action.response.aggregations\n      }\n    case actionTypes.FETCH_WITH_FILTERS:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    case actionTypes.UPDATE_SOME_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: {\n          ...state.aggregations,\n          [action.aggregation]: action.aggregations[action.aggregation]\n        }\n      }\n    case actionTypes.UPDATE_ALL_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: action.aggregations,\n      }\n    case actionTypes.UPDATE_PAGE_NUMBER:\n      return {\n        ...state,\n        loading: true,\n        activePage: action.pageNumber,\n      }\n    case actionTypes.FETCH_NEW_PAGE:\n      return {\n        ...state,\n        loading: false,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    default:\n      return state;\n  }\n};\n\nexport default resultReducer;","import { combineReducers } from 'redux';\nimport resultReducer from './resultReducer';\n\nconst rootReducer = combineReducers({\n  resultState: resultReducer,\n})\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'; // this polyfill needs to be first for IE11 support\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'; // necessary for IE11 support for Router\nimport 'regenerator-runtime/runtime'; // necessary for IE11 support for Router\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createHashHistory } from 'history';\nimport App from './Components/App';\nimport rootReducer from './store/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport const history = createHashHistory();\n\nfunction renderIntrasearchUI(divID) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter hashType=\"noslash\" history={history}>\n        <App />\n      </HashRouter>\n    </Provider>,\n    document.getElementById(divID)\n  );\n}\n\nexport default renderIntrasearchUI;\nwindow.Explorer = {\n  renderIntrasearchUI: renderIntrasearchUI,\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}