{"version":3,"sources":["store/actions/paramHandlers.js","store/actions/actions.js","store/actions/actionTypes.js","Components/ResultsList.jsx","Components/Checkbox.jsx","Components/CheckboxCategory.jsx","Components/FiltersContainer.jsx","Components/ResultsContainer.jsx","Components/FormContainer.jsx","Components/App.js","store/reducers/resultReducer.js","store/reducers/rootReducer.js","serviceWorker.js","index.js","API/config.js"],"names":["getAppliedFilters","query_string","queryString","categories","q","appliedFilters","Object","keys","toString","entries","forEach","key","value","split","toggleFilter","category","newFilters","includes","filter","el","push","length","updateFilters","dispatch","type","params","arrayFormat","searchQuery","encodeURIComponent","encodedQueryString","history","search","fetchWithQuery","config","url","then","response","json","updateAggregations","aggsToUpdate","cat","agg","existingFilters","map","item","aggregations","aggregation","fetchNewQuery","activePage","query","fetch","headers","accessToken","sanitize","text","html","textarea","document","createElement","innerHTML","decodeEntity","replace","withRouter","props","className","total","results","id","href","link","title","summary","Checkbox","state","isChecked","handleToggleFilter","bind","event","target","name","this","setState","location","prevProps","prevState","uniqStr","snake","$1","toUpperCase","onChange","checked","snakeToTitleCase","Component","connect","actionCreators","require","CheckboxCategory","showAll","resetToggle","e","preventDefault","showAllText","limit","onClick","toggleShowAll","itemArray","items","sort","a","b","i","uniqItemArray","Set","open","filterTitles","slice","toggleShowButton","trade_topics","industries","countries","types","clearFilters","encodedQuery","CATEGORIES_ORDER","useState","setStr","Date","now","listCategories","obj","filterItemsForMarketIntel","ResultsContainer","getQueryTerm","pageNumber","fetchNewPage","resultState","showLoadingAnimation","ready","loading","rows","style","width","margin","color","totalItemsCount","itemsCountPerPage","firstPageText","prevPageText","nextPageText","lastPageText","handlePageChange","FormContainer","handleSubmit","handleChangeInput","parsed","queryTerm","onSubmit","aria-label","placeholder","size","path","render","initialState","offset","resultReducer","action","rootReducer","combineReducers","Boolean","window","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createBrowserHistory","renderIntrasearchUI","divID","ReactDOM","getElementById","Explorer","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/0.intrasearch_ui.js","sourcesContent":["import * as queryString from 'query-string';\n\nexport function getAppliedFilters(query_string) {\n  let {q, ...categories} = queryString.parse(query_string);\n  let appliedFilters = {};\n\n  if (Object.keys(categories).toString() !== \"\") {\n    Object.entries(categories).forEach(\n      ([key, value]) => (\n        appliedFilters[key] = value.split(',')\n      )\n    )  \n  }\n  return appliedFilters; /* Returns an object containing key/array pairs */\n}\n\nexport function updateFilters(category, value, query_string) {\n  let appliedFilters = getAppliedFilters(query_string);\n\n  if ((appliedFilters[category]) && (appliedFilters[category].includes(value))) {\n    /* The category of the checked box already includes this value, want to remove it */\n    appliedFilters[category] = appliedFilters[category].filter(el => el !== value)\n  } else if (appliedFilters[category]) {\n    /* The category exists in the object, want to add the value to its array */\n    appliedFilters[category].push(value)\n  } else {\n    /* Initialize the category's array in the object using the checked box's value */\n    appliedFilters[category] = [value]\n  }\n\n  /* Remove categories that are now empty */\n  if (appliedFilters[category].length === 0) {\n    delete appliedFilters[category]\n  }\n  return appliedFilters\n} /* Returns new appliedFilters */\n","import * as actionTypes from './actionTypes'\nimport config from '../../API/config.js'\nimport * as queryString from 'query-string';\nimport { getAppliedFilters, updateFilters } from './paramHandlers';\nimport { history } from '../../index';\n\nexport const clearFilters = (searchQuery) => {\n  let encodedQuery= encodeURIComponent(searchQuery);\n  history.push({ search: `q=${encodedQuery}`}); /* clear applied filters from the URL */\n  return (dispatch) => {\n    return fetchWithQuery(`${config.url}?q=${encodedQuery}&size=10&offset=0`)\n    .then(response => response.json())\n    .then(response => dispatch({\n      type: actionTypes.FETCH_NEW_QUERY,\n      response: response,\n    }));\n  }\n}\n\nexport const toggleFilter = (category, value, query_string) => {\n\n  let newFilters = updateFilters(category, value, query_string);\n\n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS })\n\n    let params = queryString.stringify(newFilters, {arrayFormat: 'comma'});\n    let searchQuery = encodeURIComponent(queryString.parse(query_string).q); //want query term from the original string\n    let encodedQueryString = `q=${searchQuery}&${params}`;\n\n    history.push({ search: encodedQueryString });\n\n    return fetchWithQuery(`${config.url}?${encodedQueryString}&size=10&offset=0`)\n      .then(response => response.json())\n      .then(response => dispatch(updateAggregations(encodedQueryString, response, category)));\n  }\n}\n\nexport const updateAggregations = (query_string, response, category) => {\n  return (dispatch) => {\n    let aggsToUpdate = [];\n    const categories_array = ['trade_topics', 'industries', 'countries', 'types'];\n\n    categories_array.forEach(\n      (cat) => {\n        /* add categories to the list if they were not the subject of the toggle, or if the category is/becomes empty */\n        if ( (cat !== category) || ((Object.keys(getAppliedFilters(query_string)))===[]) || (!(getAppliedFilters(query_string)[cat])) ) {\n          aggsToUpdate.push(cat)\n        }\n      }\n    )\n    dispatch({ type: actionTypes.FETCH_WITH_FILTERS, response: response });\n\n    aggsToUpdate.forEach(agg => {\n      let existingFilters = []\n      if (getAppliedFilters(query_string)[agg]) {\n        existingFilters = getAppliedFilters(query_string)[agg].map((item) => {\n          return {value: item}\n        })\n      }\n      dispatch({ type: actionTypes.UPDATE_SOME_AGGREGATIONS, aggregations: response.aggregations, aggregation: agg, existingFilters: existingFilters });\n    })\n  }\n}\n\nexport const fetchNewQuery = (query_string, activePage=1) => {\n  history.push({ search: query_string });\n  return (dispatch) => {\n    dispatch({ type: actionTypes.RELOADING_SAME_QUERY });\n\n    /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n    return fetchWithQuery(`${config.url}${query_string}&size=10&offset=${(activePage-1)*10}`)\n      .then(response => response.json())\n      .then(response => dispatch({\n        type: actionTypes.FETCH_NEW_QUERY,\n        response: response,\n      }));\n  }\n}\n\nexport const fetchNewPage = (query_string, pageNumber) => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.UPDATE_PAGE_NUMBER, pageNumber: pageNumber });\n\n    /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n    return fetchWithQuery(`${config.url}${query_string}&size=10&offset=${(pageNumber-1)*10}`)\n      .then(response => response.json())\n      .then(response => dispatch({\n        type: actionTypes.FETCH_NEW_PAGE,\n        response: response,\n      }));\n  }\n}\n\nexport const fetchWithQuery = (query) => {\n  return fetch(query, {\n    headers: { 'subscription-key': config.accessToken }\n  })\n}\n","/* Filter Actions */\n// export const TOGGLE_FILTER = 'TOGGLE_FILTER';\n// export const CLEAR_FILTERS = 'CLEAR_FILTERS';\n\n/* Result Actions */\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\nexport const RELOADING_SAME_QUERY = 'RELOADING_SAME_QUERY';\nexport const LOADING_RESULTS = 'LOADING_RESULTS';\nexport const FETCH_NEW_QUERY = 'FETCH_NEW_QUERY';\nexport const FETCH_WITH_FILTERS = 'FETCH_WITH_FILTERS';\nexport const UPDATE_PAGE_NUMBER = 'UPDATE_PAGE_NUMBER';\nexport const FETCH_NEW_PAGE = 'FETCH_NEW_PAGE';\nexport const UPDATE_SOME_AGGREGATIONS = 'UPDATE_SOME_AGGREGATIONS';\nexport const UPDATE_ALL_AGGREGATIONS = \"UPDATE_ALL_AGGREGATIONS\";\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './styles/ResultsList.scss';\n\nfunction sanitize(text) {\n    return text ? decodeEntity(text.replace(/[\\s\\r\\n]+/g, ' ')) : null\n}\n\nfunction decodeEntity(html) {\n    var textarea = document.createElement(\"textarea\")\n    textarea.innerHTML = html\n    return textarea.value\n}\n\nconst ResultsList = (props) => {\n\n  return(\n    <div className=\"ResultsList col-2of3\">\n      <p className=\"totalMessage\"><strong>{props.total}</strong> results</p>\n\n      { props.results.map(item => {\n        return (\n          <div className=\"anItem\" key={item.id}>\n            <a href={item.link}>{item.title}</a>\n            <p>{sanitize(item.summary)}</p>\n          </div>\n        )\n      }) }\n    </div>\n  )\n}\n\nexport default withRouter(ResultsList);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getAppliedFilters } from '../store/actions/paramHandlers';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\n\nclass Checkbox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isChecked: false,\n    }\n    this.handleToggleFilter = this.handleToggleFilter.bind(this);\n  }\n\n\n  handleToggleFilter(event) {\n    const { name, value } = event.target\n    this.setState({isChecked: !this.state.isChecked}, () => { \n      this.props.toggleFilter(name, value, this.props.location.search)\n    })\n  }\n\n  componentDidMount() {\n    if (getAppliedFilters(this.props.location.search)[this.props.category]) {\n      if (getAppliedFilters(this.props.location.search)[this.props.category].includes(this.props.item)) {\n        this.setState({ isChecked: true })\n      } else { \n        this.setState({ isChecked: false })\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if ( queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q ) {\n      /* If we change the query term, reset the checkboxes status */\n      this.setState({ isChecked: false })\n    } else if ((this.props.uniqStr) !== (prevProps.uniqStr)) {\n      /* uniqStr changes when the 'Clear All' button is clicked */\n      this.setState({ isChecked: false })\n    }\n  }\n\n  snakeToTitleCase (snake) {\n    return snake.replace(/([_][a-z])/ig, ($1) => {\n      return $1.toUpperCase()\n        .replace('_', ' ');\n    }).replace(/(^[a-z]{1})/ig, ($1) => {\n      return $1.toUpperCase()\n    })\n  }\n\n  render() {\n    const { key, category, item } = this.props;\n    return (\n      <label key={key}>\n        <input type=\"checkbox\" name={category} value={item} key={key} onChange={(event) => this.handleToggleFilter(event)} checked={this.state.isChecked} /> {(category === \"types\") ? (this.snakeToTitleCase(item)) : (item)}\n      </label>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleFilter: (category, value, query_string) => dispatch(actionCreators.toggleFilter(category, value, query_string)),\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(Checkbox));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as queryString from 'query-string';\nimport Checkbox from './Checkbox';\nrequire('details-polyfill')\n\nclass CheckboxCategory extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showAll: false,\n    }\n  }\n\n  resetToggle() {\n    this.setState({ showAll: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      /* If we start with a new query term, reset the showAll toggles, otherwise leave them to the user */\n      this.resetToggle();\n    }\n  }\n\n  toggleShowAll(e) {\n    e.preventDefault();\n    this.setState({ showAll: !this.state.showAll });\n  }\n\n  toggleShowButton(length) {\n    const { showAll } = this.state;\n    const showAllText = showAll ? '- Show Less' : '+ Show More';\n\n    if (length <= this.props.limit) return null;\n\n    return (\n      <button onClick={(e)=>this.toggleShowAll(e)} className=\"toggleShow\">{ showAllText }</button>\n    );\n  }\n\n  render() {\n    const itemArray = this.props.items.sort((a, b) => a[\"value\"] > b[\"value\"] ? 1 : -1).map(i => i[\"value\"]);\n    const uniqItemArray = [...new Set(itemArray)]\n    return (\n\n      (uniqItemArray.length === 0) ? ( null ) : (\n\n        <details className=\"FilterCategory\" open>\n        <summary id={filterTitles[this.props.category]}>{filterTitles[this.props.category]}</summary>\n\n        { ((uniqItemArray.length > this.props.limit) && (!this.state.showAll)) ? (\n          uniqItemArray.slice(0, this.props.limit).map((item, i) => {\n            return <Checkbox key={item} category={this.props.category} item={item} uniqStr={this.props.uniqStr}/>\n          })\n        ) : (\n          uniqItemArray.map((item, i) => {\n            return <Checkbox key={item} category={this.props.category} item={item} uniqStr={this.props.uniqStr}/>\n          })\n        )}\n        {this.toggleShowButton(uniqItemArray.length)}\n        </details>\n      )\n\n    )\n  }\n}\n\nexport default withRouter(CheckboxCategory);\n\nconst filterTitles = {\n  trade_topics: \"Trade Topics\",\n  industries: \"Industries\",\n  countries: \"Countries\",\n  types: \"Type\",\n}\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport CheckboxCategory from './CheckboxCategory';\nimport './styles/FiltersContainer.scss';\nimport * as actionCreators from '../store/actions/index';\nrequire('details-polyfill')\n\nfunction FiltersContainer(props) {\n\n  const CATEGORIES_ORDER = {\n    'trade_topics': 1,\n    'types': 2,\n    'industries': 3,\n    'countries': 4\n  }\n\n  function listCategories() {\n    let categories = []\n      Object.entries(props.aggregations).forEach(\n        ([key, value]) => categories.push(key)\n      )\n    return categories.sort((a, b) => CATEGORIES_ORDER[a] > CATEGORIES_ORDER[b] ? 1 : -1)\n  }\n\n  const [uniqStr, setStr] = useState(0);\n\n  function handleClearFilters() {\n    props.clearFilters(queryString.parse(props.location.search).q);\n    setStr(Date.now())\n    /* When click 'Clear All', update uniqStr with the current datetime, and pass it down to the checkbox.  When that changes, the box unchecks. */\n    /* It's wierd, I know.  But \"document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false )\" doesn't work because they're controlled components and are not connected to the redux store */\n  }\n\n  function filterItemsForMarketIntel(category, items) {\n    if (category === 'types') {\n      return items.filter(obj => obj['value'] === 'market_intelligence')\n    } else { return items }\n  }\n\n  function filterCategories() {\n    return (\n      // eslint-disable-next-line array-callback-return\n      listCategories().map((cat, i) => {\n        if (props.aggregations[cat].length) {\n          const items = filterItemsForMarketIntel(cat, props.aggregations[cat])\n          return (<CheckboxCategory category={cat} key={i} items={items} limit={5} uniqStr={uniqStr} />)\n        }\n      })\n    )\n  }\n\n  return(\n    <div className='FiltersContainer col-3'>\n      { (props.aggregations !== {}) ? (\n        <>\n          <div><h2>Filter Results</h2><button onClick={() => handleClearFilters()}>[Clear All]</button></div>\n          {filterCategories()}\n        </>\n      ) : null }\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearFilters: (searchQuery) => dispatch(actionCreators.clearFilters(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(FiltersContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport Pagination from 'react-js-pagination';\nimport ReactPlaceholder from 'react-placeholder';\nimport \"react-placeholder/lib/reactPlaceholder.css\";\nimport ResultsList from './ResultsList';\nimport FiltersContainer from './FiltersContainer';\nimport './styles/ResultsContainer.scss';\n\nclass ResultsContainer extends Component {\n\n  getQueryTerm = () => queryString.parse(this.props.location.search).q;\n\n  handlePageChange(pageNumber) {\n    this.props.fetchNewPage(this.props.location.search, pageNumber)\n  };\n\n  componentDidMount() {\n    this.props.fetchNewQuery(this.props.location.search)\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      this.props.fetchNewQuery(this.props.location.search)\n    }\n  }\n\n  render() {\n    // console.log('🍎', this.props.location.search) // `?q=banks&industries=Agribusiness,Automotive`\n    // console.log('🍏', queryString.parse(this.props.location.search)) // { industries: \"Agribusiness,Automotive\", q: \"banks\" }\n    return (\n      <div className=\"ResultsContainer\">\n\n        <FiltersContainer aggregations={this.props.resultState.aggregations}/>\n\n        <ReactPlaceholder \n          type='text' \n          showLoadingAnimation={true} \n          ready={!this.props.resultState.loading} \n          rows={6} style={{ width: '60vw', margin: '2em 0 0.5em 1em' }} color='#E0E0E0'\n        >\n\n          <ResultsList searchQuery={this.getQueryTerm()} total={this.props.resultState.total} results={this.props.resultState.results}/>\n\n        </ReactPlaceholder>\n\n        { (this.props.resultState.total > 0) ? (\n          <Pagination \n            activePage={this.props.resultState.activePage}\n            totalItemsCount={this.props.resultState.total}\n            itemsCountPerPage={10}\n            firstPageText=\"<<\"\n            prevPageText=\"<\"\n            nextPageText=\">\"\n            lastPageText=\">>\"\n            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\n          />\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string) => dispatch(actionCreators.fetchNewQuery(query_string)),\n    fetchNewPage: (query_string, pageNumber) => dispatch(actionCreators.fetchNewPage(query_string, pageNumber))\n  }\n}\n\nexport default ResultsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResultsContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IoMdSearch } from 'react-icons/io'\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport ResultsContainer from './ResultsContainer';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchQuery: '',\n    }\n    this.handleChangeInput = this.handleChangeInput.bind(this);\n  }\n\n  handleChangeInput(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let encodedQuery = encodeURIComponent(this.state.searchQuery);\n    if (queryString.parse(this.props.location.search).q === this.state.searchQuery) {\n      /* if we're trying to search again with the same query, trigger the search */\n      this.props.fetchNewQuery(`?q=${encodedQuery}`);\n    } else {\n      this.props.history.push({ search: `q=${encodedQuery}` });\n    }\n  }\n\n  render() {\n    const parsed = queryString.parse(this.props.location.search);\n    // console.log('parsed', parsed)\n    const queryTerm = parsed.q;\n\n    return (\n      <div>\n        <form onSubmit={(event) => this.handleSubmit(event)}>\n          { queryTerm ? (\n            <p className=\"searchMessage\">Search Results for <strong className=\"searchMessageKeyword\">{queryTerm}</strong></p>\n          ) : null }\n\n          <input\n            type=\"text\"\n            name=\"searchQuery\"\n            aria-label=\"Enter search query\"\n            placeholder=\"Enter search query\"\n            value={this.state.searchQuery}\n            onChange={(event) => this.handleChangeInput(event)}\n          />\n          <button type=\"submit\" aria-label=\"submit\"><IoMdSearch size=\"2em\"/></button>\n        </form>\n        { queryTerm ? (\n          <ResultsContainer searchQuery={parsed}/>\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string) => dispatch(actionCreators.fetchNewQuery(query_string)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FormContainer));\n","import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport FormContainer from './FormContainer';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path={`/:query?`} render={(props) =>\n        <FormContainer {...props} location={props.location} />} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  total: 0,\n  offset: 0,\n  activePage: 1,\n  results: [],\n  aggregations: {},\n  loading: false,\n}\n\nconst resultReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actionTypes.RELOADING_SAME_QUERY:\n      return {\n        ...state,\n        loading: true,\n        aggregations: {},\n        activePage: 1\n      }\n    case actionTypes.LOADING_RESULTS:\n      return {\n        ...state,\n        loading: true,\n        activePage: 1\n      }\n    case actionTypes.FETCH_NEW_QUERY:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n        aggregations: action.response.aggregations,\n        activePage: 1\n      }\n    case actionTypes.FETCH_WITH_FILTERS:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    case actionTypes.UPDATE_SOME_AGGREGATIONS:\n      // console.log([action.aggregation], [...action.aggregations[action.aggregation], ...action.existingFilters])\n      state.aggregations[action.aggregation] = action.aggregations[action.aggregation]\n      return {\n        ...state,\n        aggregations: {\n          ...state.aggregations,\n          // need to spread in here the currently selected ones\n          // [action.aggregation]: [...action.aggregations[action.aggregation], ...action.existingFilters]\n          // [action.aggregation]: action.aggregations[action.aggregation]\n        }\n      }\n    case actionTypes.UPDATE_ALL_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: action.aggregations,\n      }\n    case actionTypes.UPDATE_PAGE_NUMBER:\n      return {\n        ...state,\n        loading: true,\n        activePage: action.pageNumber,\n      }\n    case actionTypes.FETCH_NEW_PAGE:\n      return {\n        ...state,\n        loading: false,\n        offset: action.response.offset,\n        results: action.response.results\n      }\n    default:\n      return state;\n  }\n};\n\nexport default resultReducer;\n","import { combineReducers } from 'redux';\nimport resultReducer from './resultReducer';\n\nconst rootReducer = combineReducers({\n  resultState: resultReducer,\n})\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'; // this polyfill needs to be first for IE11 support\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'; // necessary for IE11 support for Router\nimport 'regenerator-runtime/runtime'; // necessary for IE11 support for Router\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createBrowserHistory } from 'history';\nimport App from './Components/App';\nimport rootReducer from './store/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport const history = createBrowserHistory();\n\nfunction renderIntrasearchUI(divID) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById(divID)\n  );\n}\n\nexport default renderIntrasearchUI;\nwindow.Explorer = {\n  renderIntrasearchUI: renderIntrasearchUI,\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","if (process.env.NODE_ENV === 'test') {\n  module.exports = {\n    /* move the json file to `/public` first */\n    url: \"./Drupal_Intrasearch-export.json\",\n    apiKey: \"test\",\n  }\n} else {\n  module.exports = {\n    url: \"https://data.trade.gov/web_documents/v1/search\",\n    accessToken: \"06800b3aa7914d61a9e770d671eda3c8\",\n  }\n}\n"],"sourceRoot":""}