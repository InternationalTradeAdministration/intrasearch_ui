{"version":3,"sources":["API/config.js","store/actions/paramHandlers.js","store/actions/actions.js","store/actions/actionTypes.js","Components/ResultsList.jsx","Components/CheckboxCategory.jsx","Components/FiltersContainer.jsx","Components/ResultsContainer.jsx","Components/FormContainer.jsx","Components/App.js","store/reducers/resultReducer.js","store/reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["module","exports","url","apiKey","getAppliedFilters","query_string","queryString","categories","q","appliedFilters","Object","keys","toString","entries","forEach","key","value","split","toggleFilter","event","name","target","newFilters","includes","filter","el","push","updateFilters","dispatch","type","params","arrayFormat","searchQuery","history","search","fetch","config","then","response","json","updateAggregations","category","aggsToUpdate","agg","aggregations","aggregation","fetchNewQuery","activePage","document","querySelectorAll","checked","withRouter","props","className","total","results","map","item","updatedDate","Date","parseInt","changed","toDateString","id","href","link","title","summary","require","CheckboxCategory","state","showAll","this","setState","prevProps","prevState","location","resetToggle","e","preventDefault","length","showAllText","limit","onClick","toggleShowAll","open","filterTitles","items","sort","a","b","slice","i","onChange","handleToggleFilter","isChecked","toggleShowButton","Component","connect","resultState","actionCreators","trade_topics","industries","countries","clearFilters","listCategories","cat","ResultsContainer","getQueryTerm","pageNumber","fetchNewPage","showLoadingAnimation","ready","loading","rows","style","width","margin","color","totalItemsCount","itemsCountPerPage","firstPageText","prevPageText","nextPageText","lastPageText","handlePageChange","FormContainer","handleSubmit","handleChangeInput","bind","parsed","queryTerm","onSubmit","aria-label","placeholder","size","path","render","initialState","offset","resultReducer","action","rootReducer","combineReducers","Boolean","window","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createHashHistory","renderIntrasearchUI","divID","ReactDOM","hashType","getElementById","Explorer","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.7e2ed70a.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n  }\n} else if (process.env.NODE_ENV === 'staging') {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n  }\n} else if (process.env.NODE_ENV === 'test'){\n  module.exports = {\n    /* move the json file to /public first */\n    url: \"./Drupal_Intrasearch-export.json\",\n    apiKey: \"test\",  \n  }\n} else {\n  module.exports = {\n    url: \"https://api.govwizely.com/v1/web_documents/search.json\",\n    apiKey: \"FqEELAPpt-UDPBxpoo5onvku\",\n    // url: \"./Drupal_Intrasearch-export.json\",\n    // apiKey: \"test\",  \n  }\n}\n","import * as queryString from 'query-string';\n\nexport function paramString(searchQuery, appliedFilters) {\n  let filterParams = queryString.stringify(appliedFilters, {arrayFormat: 'comma'})\n  return `&q=${searchQuery}&${filterParams}`\n}\n\n\nexport function getAppliedFilters(query_string) {\n  // console.log(query_string);\n  let {q, ...categories} = queryString.parse(query_string);\n\n  let appliedFilters = {};\n\n  if (Object.keys(categories).toString() !== \"\") {\n    Object.entries(categories).forEach(\n      ([key, value]) => (\n        appliedFilters[key] = value.split(',')\n      )\n    )  \n  }\n  // console.log(appliedFilters);\n  return appliedFilters; /* Returns an object containing key/array pairs */\n}\n\nexport function updateFilters(event, query_string) {\n  let appliedFilters = getAppliedFilters(query_string);\n\n  const { name, value } = event.target;\n  // console.log(value);\n\n  if ((appliedFilters[name]) && (appliedFilters[name].includes(value))) {\n    appliedFilters[name] = appliedFilters[name].filter(el => el !== value)\n  } else if (appliedFilters[name]) {\n    appliedFilters[name].push(value)\n  } else {\n    appliedFilters[name] = [value]\n\n  }\n  // console.log(appliedFilters)\n  return appliedFilters\n} /* Returns new appliedFilters */\n","import * as actionTypes from './actionTypes'\nimport config from '../../API/config.js'\nimport * as queryString from 'query-string';\nimport { getAppliedFilters, updateFilters } from './paramHandlers';\nimport { history } from '../../index';\n\nexport const clearFilters = (searchQuery) => {\n  document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n  history.push({ search: `q=${searchQuery}`}); /* effectively clears the filters */\n  return (dispatch) => {\n    return fetch(`${config.url}?q=${searchQuery}&api_key=${config.apiKey}&size=10&offset=0`)\n    .then(response => response.json())\n    .then(response => dispatch({ \n      type: actionTypes.FETCH_NEW_QUERY, \n      response: response,\n    }));\n  }\n}\n\nexport const toggleFilter = (event, query_string) => {\n  const { name } = event.target;\n  let newFilters = updateFilters(event, query_string);\n  \n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS })\n\n    let params = queryString.stringify(newFilters, {arrayFormat: 'comma'});\n    // console.log(params)\n    let searchQuery = queryString.parse(query_string).q; //want query term from the original string\n\n    history.push({ search: `q=${searchQuery}&${params}` });\n\n    return fetch(`${config.url}?q=${searchQuery}&${params}&api_key=${config.apiKey}&size=10&offset=0`)\n      .then(response => response.json())\n      .then(response => dispatch(updateAggregations(`q=${searchQuery}&${params}`, response, name)));  \n  }\n}\n\nexport const updateAggregations = (query_string, response, category) => {\n\n  return (dispatch) => {\n    let aggsToUpdate = [];\n    \n    Object.entries(getAppliedFilters(query_string)).forEach(\n      ([key, value]) => {\n        /* add categories to the list if they were not the subject of the toggle, or if the category is/becomes empty */\n        if (( key !== category ) || ( Object.entries(getAppliedFilters(query_string)[key]).toString() === '' )) {\n          aggsToUpdate.push(key)\n        }\n      }\n    )\n\n    dispatch({ type: actionTypes.FETCH_WITH_FILTERS, response: response });\n    \n    aggsToUpdate.forEach(agg => {\n      dispatch({ type: actionTypes.UPDATE_SOME_AGGREGATIONS, aggregations: response.aggregations, aggregation: agg });\n    })\n  }\n}\n\nexport const fetchNewQuery = (query_string, activePage=1) => {\n  document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n  \n  return (dispatch) => {\n    dispatch({ type: actionTypes.LOADING_RESULTS });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(activePage-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_QUERY, \n        response: response,\n      }));\n  }\n}\n\nexport const fetchNewPage = (query_string, pageNumber) => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.UPDATE_PAGE_NUMBER, pageNumber: pageNumber });\n    \n    return fetch(`${config.url}${query_string}&api_key=${config.apiKey}&size=10&offset=${(pageNumber-1)*10}`) /* query_string came from `this.props.location.search`, so it already has the leading `?` */\n      .then(response => response.json())\n      .then(response => dispatch({ \n        type: actionTypes.FETCH_NEW_PAGE, \n        response: response,\n      }));\n  }\n}\n","/* Filter Actions */\n// export const TOGGLE_FILTER = 'TOGGLE_FILTER';\n// export const CLEAR_FILTERS = 'CLEAR_FILTERS';\n\n/* Result Actions */\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\nexport const LOADING_RESULTS = 'LOADING_RESULTS';\nexport const FETCH_NEW_QUERY = 'FETCH_NEW_QUERY';\nexport const FETCH_WITH_FILTERS = 'FETCH_WITH_FILTERS';\nexport const UPDATE_PAGE_NUMBER = 'UPDATE_PAGE_NUMBER';\nexport const FETCH_NEW_PAGE = 'FETCH_NEW_PAGE';\nexport const UPDATE_SOME_AGGREGATIONS = 'UPDATE_SOME_AGGREGATIONS';\nexport const UPDATE_ALL_AGGREGATIONS = \"UPDATE_ALL_AGGREGATIONS\";","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './styles/ResultsList.scss';\n\nconst ResultsList = (props) => {\n\n  return(\n    <div className=\"ResultsList\">\n      <p className=\"totalMessage\"><strong>{props.total}</strong> results</p>\n      \n      { props.results.map(item => {\n        let updatedDate = new Date(parseInt(item.changed)).toDateString()\n        return (\n          <div className=\"anItem\" key={item.id}>\n            <a href={item.link}>{item.title}</a>\n            <p>Updated {updatedDate}</p>\n            <p>{item.summary}</p>\n          </div>\n        )\n      }) }\n    </div>\n  )\n}\n\nexport default withRouter(ResultsList);","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport { getAppliedFilters } from '../store/actions/paramHandlers';\nimport * as actionCreators from '../store/actions/index';\nrequire('details-polyfill')\n\nclass CheckboxCategory extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showAll: false,\n    }\n  }\n\n  resetToggle() {\n    this.setState({ showAll: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      /* If we start with a new query term, reset the showAll toggles, otherwise leave them to the user */\n      this.resetToggle();\n    }\n  }\n\n  toggleShowAll(e) {\n    e.preventDefault();\n    this.setState({ showAll: !this.state.showAll });\n  }\n\n  toggleShowButton(length) {\n    const { showAll } = this.state;\n    const showAllText = showAll ? '- Show Less' : '+ Show More';\n\n    if (length <= this.props.limit) return null;\n\n    return (\n      <button onClick={(e)=>this.toggleShowAll(e)} className=\"toggleShow\">{ showAllText }</button>\n    );\n  }\n\n  handleToggleFilter(event) {\n    this.props.toggleFilter(event, this.props.location.search)\n  }\n  \n  isChecked(item) {\n    if (getAppliedFilters(this.props.location.search)[this.props.category]) {\n      if (getAppliedFilters(this.props.location.search)[this.props.category].includes(item[\"key\"])) {\n        return true\n      } else { return false }\n    }\n  }\n\n  render() {\n    return (\n      <details className=\"FilterCategory\" open>\n      <summary>{filterTitles[this.props.category]}</summary>\n\n      { ((this.props.items.length > this.props.limit) && (!this.state.showAll)) ? (\n        this.props.items.sort((a, b) => a[\"key\"] > b[\"key\"] ? 1 : -1).slice(0, this.props.limit).map((item, i) => {\n          return (\n            <label key={i}>\n              <input type=\"checkbox\" name={this.props.category} value={item[\"key\"]} key={i} onChange={(event) => this.handleToggleFilter(event)} checked={this.isChecked(item)} /> {item[\"key\"]}: {item[\"doc_count\"]}\n            </label>\n          )\n        })\n      ) : (\n        this.props.items.sort((a, b) => a[\"key\"] > b[\"key\"] ? 1 : -1).map((item, i) => {\n          return (\n            <label key={i}>\n              <input type=\"checkbox\" name={this.props.category} value={item[\"key\"]} key={i} onChange={(event) => this.handleToggleFilter(event)} checked={this.isChecked(item)} /> {item[\"key\"]}: {item[\"doc_count\"]}\n            </label>\n          )\n        })\n      )}\n      {this.toggleShowButton(this.props.items.length)}\n      </details>\n\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleFilter: (event, searchQuery) => dispatch(actionCreators.toggleFilter(event, searchQuery)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CheckboxCategory));\n\nconst filterTitles = {\n  trade_topics: \"Trade Topics\",\n  industries: \"Industries\",\n  countries: \"Countries\",\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport CheckboxCategory from './CheckboxCategory';\nimport './styles/FiltersContainer.scss';\nimport * as actionCreators from '../store/actions/index';\nrequire('details-polyfill')\n\nfunction FiltersContainer(props) {\n\n  function listCategories() {\n    let categories = []\n      Object.entries(props.aggregations).forEach(\n        ([key, value]) => categories.push(key)\n      )\n    return categories\n  }\n\n  function handleClearFilters() {\n    props.clearFilters(queryString.parse(props.location.search).q);\n  }\n\n  function filterCategories() {\n    return (\n      // eslint-disable-next-line array-callback-return\n      listCategories().map((cat, i) => {\n        if (props.aggregations[cat].length) {\n          return (<CheckboxCategory category={cat} key={i} items={props.aggregations[cat]} limit={5}/>)\n        }\n      })\n    )\n  }\n  \n  return(\n    <div className=\"FiltersContainer\">\n      { (props.aggregations !== {}) ? (\n        <>\n          <div><h2>Filter Results</h2><button onClick={() => handleClearFilters()}>[Clear All]</button></div>\n          {filterCategories()}\n        </>\n      ) : null }\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearFilters: (searchQuery) => dispatch(actionCreators.clearFilters(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FiltersContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport Pagination from 'react-js-pagination';\nimport ReactPlaceholder from 'react-placeholder';\nimport \"react-placeholder/lib/reactPlaceholder.css\";\nimport ResultsList from './ResultsList';\nimport FiltersContainer from './FiltersContainer';\nimport './styles/ResultsContainer.scss';\n\nclass ResultsContainer extends Component {\n\n  getQueryTerm = () => queryString.parse(this.props.location.search).q;\n\n  handlePageChange(pageNumber) {\n    this.props.fetchNewPage(this.props.location.search, pageNumber)  // `?q=retail&countries=Andorra`\n  };\n\n  componentDidMount() {\n    this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (queryString.parse(this.props.location.search).q !== queryString.parse(prevProps.location.search).q) {\n      this.props.fetchNewQuery(this.props.location.search, this.props.resultState.activePage)\n    }\n  }\n\n  render() {\n    // console.log(this.getQueryTerm());\n    // console.log(this.props.location.search)\n    // console.log(queryString.parse(this.props.location.search))\n    return (\n      <div className=\"ResultsContainer\">\n\n        <FiltersContainer aggregations={this.props.resultState.aggregations}/>\n\n        <ReactPlaceholder \n          type='text' \n          showLoadingAnimation={true} \n          ready={!this.props.resultState.loading} \n          rows={6} style={{ width: 250, margin: '2em 0 0.5em 1em' }} color='#E0E0E0'\n        >\n\n          <ResultsList searchQuery={this.getQueryTerm()} total={this.props.resultState.total} results={this.props.resultState.results}/>\n\n        </ReactPlaceholder>\n\n        { (this.props.resultState.total > 0) ? (\n          <Pagination \n            activePage={this.props.resultState.activePage}\n            totalItemsCount={this.props.resultState.total}\n            itemsCountPerPage={10}\n            firstPageText=\"<<\"\n            prevPageText=\"<\"\n            nextPageText=\">\"\n            lastPageText=\">>\"\n            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\n          />\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (query_string, activePage) => dispatch(actionCreators.fetchNewQuery(query_string, activePage)),\n    fetchNewPage: (query_string, pageNumber) => dispatch(actionCreators.fetchNewPage(query_string, pageNumber))\n  }\n}\n\nexport default ResultsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResultsContainer));\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IoMdSearch } from 'react-icons/io'\nimport * as queryString from 'query-string';\nimport * as actionCreators from '../store/actions/index';\nimport ResultsContainer from './ResultsContainer';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchQuery: '',\n    }\n    this.handleChangeInput = this.handleChangeInput.bind(this);\n  }\n\n  handleChangeInput(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.history.push({ search: `q=${this.state.searchQuery}`});\n    // this.props.fetchNewQuery(this.state.searchQuery); /* this would make it fetch twice */\n  }\n\n  render() {\n    const parsed = queryString.parse(this.props.location.search);\n    // console.log(parsed)\n    const queryTerm = parsed.q;\n\n    return (\n      <div>\n        { queryTerm ? (\n          <p className=\"searchMessage\">Search Results for <strong className=\"searchMessageKeyword\">{queryTerm}</strong></p>\n        ) : null }\n        <form onSubmit={(event) => this.handleSubmit(event)}>\n          <input\n            type=\"text\" \n            name=\"searchQuery\"\n            aria-label=\"Enter search query\"\n            placeholder=\"Enter search query\"\n            value={this.state.searchQuery}\n            onChange={(event) => this.handleChangeInput(event)}\n          />\n          <button type=\"submit\" aria-label=\"submit\"><IoMdSearch size=\"2em\"/></button>\n        </form>\n        { queryTerm ? (\n          <ResultsContainer searchQuery={parsed}/>\n        ) : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    resultState: state.resultState,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchNewQuery: (searchQuery) => dispatch(actionCreators.fetchNewQuery(searchQuery)),\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FormContainer));","import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport FormContainer from './FormContainer';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path={`/:query?`} render={(props) =>\n        <FormContainer {...props} location={props.location} />} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  total: 0,\n  offset: 0,\n  activePage: 1,\n  results: [],\n  aggregations: {},\n  loading: false,\n}\n\nconst resultReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actionTypes.LOADING_RESULTS:\n      return { \n        ...state, \n        loading: true, \n      }\n    case actionTypes.FETCH_NEW_QUERY:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n        aggregations: action.response.aggregations\n      }\n    case actionTypes.FETCH_WITH_FILTERS:\n      return {\n        ...state,\n        loading: false,\n        total: action.response.total,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    case actionTypes.UPDATE_SOME_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: {\n          ...state.aggregations,\n          [action.aggregation]: action.aggregations[action.aggregation]\n        }\n      }\n    case actionTypes.UPDATE_ALL_AGGREGATIONS:\n      return {\n        ...state,\n        aggregations: action.aggregations,\n      }\n    case actionTypes.UPDATE_PAGE_NUMBER:\n      return {\n        ...state,\n        loading: true,\n        activePage: action.pageNumber,\n      }\n    case actionTypes.FETCH_NEW_PAGE:\n      return {\n        ...state,\n        loading: false,\n        offset: action.response.offset,\n        results: action.response.results,\n      }\n    default:\n      return state;\n  }\n};\n\nexport default resultReducer;","import { combineReducers } from 'redux';\nimport resultReducer from './resultReducer';\n\nconst rootReducer = combineReducers({\n  resultState: resultReducer,\n})\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'; // this polyfill needs to be first for IE11 support\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'; // necessary for IE11 support for Router\nimport 'regenerator-runtime/runtime'; // necessary for IE11 support for Router\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createHashHistory } from 'history';\nimport App from './Components/App';\nimport rootReducer from './store/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport const history = createHashHistory();\n\nfunction renderIntrasearchUI(divID) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter hashType=\"noslash\">\n        <App />\n      </HashRouter>\n    </Provider>,\n    document.getElementById(divID)\n  );\n}\n\nexport default renderIntrasearchUI;\nwindow.Explorer = {\n  renderIntrasearchUI: renderIntrasearchUI,\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}